# my github actions workflow for running django tests automatically
# also checking my code for security issues (bandit), formatting (flake8), and test coverage

name: Django CI  # continuous integration (automated code checks)

# run whenever i push or make a pull request to the main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    # run on a virtual ubuntu machine provided by github
    runs-on: ubuntu-latest

    # include a temporary postgres database for my tests
    services:
      postgres:
        image: postgres:13  # using a docker image of postgres version 13
        env:
          POSTGRES_DB: test_db  # name of the test database
          POSTGRES_USER: test_user  # fake test user
          POSTGRES_PASSWORD: test_pass  # password for the test user
        ports:
          - 5432:5432
        options: >-  # checking if the database is ready before running tests
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    # step 1 – geting copy of my project code from github
    - name: checkout repo
      uses: actions/checkout@v3

    # step 2 – setting up python so i can run django and my tools
    - name: set up python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'  # match the python version in my local setup

    # step 3 – installing all required python packages for my project and tools
    # makng sure pip is up to date
    # installing my project’s dependencies
     # installing extra tools for testing and checking quality
    - name: install dependencies
      run: |
        python -m pip install --upgrade pip  
        pip install -r requirements.txt  
        pip install coverage flake8 bandit  

    # step 4 – running my django tests and collecting a coverage report
    - name: run django tests with coverage
      run: |
        coverage run manage.py test  # run all my django tests
        coverage report  # show the results in the terminal
        coverage html  # also generate a visual html report

    # step 5 – uploading the html report so i can view it in the github UI if needed
    - name: upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: html-coverage-report
        path: htmlcov/  # folder where coverage html output is saved

    # step 6 – checking for any python code style or formatting issues
    - name: run flake8
      run: flake8 budgets users team_budget_planner

    # step 7 – scanning the code for security risks like hardcoded passwords
    - name: run bandit security scan
      run: bandit -r budgets users team_budget_planner  # -r to scan all files inside these folders

