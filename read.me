# Secured Team Budget Planner

A secure and collaborative Django web application for managing team budgets and tracking expenses. Designed with a focus on security, maintainability, and modern DevOps practices.

---

## Overview

Team Budget Planner is a web based budgeting tool built using the Django framework in Python. It enables authenticated users to create budgets, log transactions, and manage spending in a collaborative and role restricted environment.

The application implements security best practices to defend against common web threats such as SQL Injection, Cross Site Scripting (XSS), and Cross Site Request Forgery (CSRF). It also integrates CI tools and static analysis to ensure code quality and test reliability.

---

## Tech Stack

- **Language:** Python 3.10+
- **Framework:** Django 4.x
- **Database:** SQLite (for development)
- **Version Control:** Git + GitHub
- **CI/CD:** GitHub Actions
- **Security:** Bandit (static analysis)
- **Code Quality:** Flake8 + autopep8
- **Containerisation (optional):** Docker

---

## Features

- User registration and login
- Role based access control (admin and regular users)
- Budget and transaction CRUD operations
- Responsive and accessible UI
- CSRF, SQL Injection, and XSS protection
- Automated unit testing via GitHub Actions
- Static code and security checks with Flake8 and Bandit
- `.env` support for secure environment variable management

---

## How to Run Locally

### 1. Install Python

Install Python 3.10 or later:  
 [https://www.python.org/downloads/](https://www.python.org/downloads/)

### 2. Clone the Repository

```bash
git clone https://github.com/tech5hu/secured_team_budget_planner
cd secured_team_budget_planner
```

### 3. Create and Activate a Virtual Environment

```bash
python -m venv venv
source venv/bin/activate        # Mac/Linux
venv\Scripts\activate           # Windows
```

### 4. Install Dependencies

```bash
pip install -r requirements.txt
```

### 5. Set Up Environment Variables

Create a `.env` file in the root directory with:

```env
SECRET_KEY=your-secret-key
DEBUG=True
ALLOWED_HOSTS=127.0.0.1,localhost
```

Generate a secret key using:

```bash
python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
```

### 6. Apply Migrations and Create Superuser

```bash
python manage.py makemigrations
python manage.py migrate
python manage.py createsuperuser
```

### 7. Start the Development Server

```bash
python manage.py runserver
```

Visit [http://127.0.0.1:8000](http://127.0.0.1:8000) to access the app.

---

## Security Highlights

- Django ORM protects against SQL Injection
- Auto escaped templates prevent XSS
- CSRF tokens enabled by default
- Server side form and model validation
- Role based access enforcement
- `.env` for secret configuration

---

## DevOps Integration

- Version control with Git and GitHub
- CI pipeline using GitHub Actions
- Unit testing runs on each push
- Docker ready with included `Dockerfile`
- Flake8 linting + autopep8 formatting
- Bandit for static security analysis

---

## Running Tests

Run all tests with:

```bash
python manage.py test
```

Tests cover:

- Login and role based access
- Budget and transaction validation
- Form handling and invalid inputs

---

## Docker (Optional)

Build and run the app in Docker:

```Dockerfile
FROM python:3.10
WORKDIR /app
COPY . /app
RUN pip install --upgrade pip && pip install -r requirements.txt
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
```

---
